From: "Luis R. Rodriguez" <mcgrof@suse.com>
Date: Wed, 13 Aug 2014 16:05:22 -0400
Subject: [PATCH 2/2] btrfs: use the new VFS super_block_dev
References: bnc#865869
Patch-mainline: submitted, but not accepted

Use the new VFS layer struct super_block_dev instead of carrying
the anonymous bdev's on our own. This makes the VFS layer aware of
all of our anonymous dev's on the super block.

Signed-off-by: Luis R. Rodriguez <mcgrof@suse.com>
Signed-off-by: Filipe Manana <fdmanana@suse.com>
fdmanana: fix for running qgroup sanity tests
---
 fs/btrfs/ctree.h   | 7 ++-----
 fs/btrfs/disk-io.c | 7 +++----
 fs/btrfs/inode.c   | 2 +-
 fs/btrfs/super.c   | 2 +-
 4 files changed, 7 insertions(+), 11 deletions(-)

--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -1234,11 +1234,8 @@ struct btrfs_root {
 	 * protected by inode_lock
 	 */
 	struct radix_tree_root delayed_nodes_tree;
-	/*
-	 * right now this just gets used so that a root has its own devid
-	 * for stat.  It may be used for more later
-	 */
-	dev_t anon_dev;
+
+	struct super_block_dev sbdev;
 
 	spinlock_t root_item_lock;
 	refcount_t refs;
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -1230,9 +1230,9 @@ static void __setup_root(struct btrfs_root *root, struct btrfs_fs_info *fs_info,
 	else
 		root->defrag_trans_start = 0;
 	root->root_key.objectid = objectid;
-	root->anon_dev = 0;
 
 	spin_lock_init(&root->root_item_lock);
+	init_anon_sbdev(&root->sbdev);
 }
 
 static struct btrfs_root *btrfs_alloc_root(struct btrfs_fs_info *fs_info,
@@ -1528,7 +1528,7 @@ int btrfs_init_fs_root(struct btrfs_root *root)
 	spin_lock_init(&root->ino_cache_lock);
 	init_waitqueue_head(&root->ino_cache_wait);
 
-	ret = get_anon_bdev(&root->anon_dev);
+	ret = insert_anon_sbdev(root->fs_info->sb, &root->sbdev);
 	if (ret)
 		goto fail;
 
@@ -3882,8 +3882,7 @@ static void free_fs_root(struct btrfs_root *root)
 {
 	iput(root->ino_cache_inode);
 	WARN_ON(!RB_EMPTY_ROOT(&root->inode_tree));
-	if (root->anon_dev)
-		free_anon_bdev(root->anon_dev);
+	remove_anon_sbdev(&root->sbdev);
 	if (root->subv_writers)
 		btrfs_free_subvolume_writers(root->subv_writers);
 	free_extent_buffer(root->node);
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -9416,7 +9416,7 @@ static int btrfs_getattr(const struct path *path, struct kstat *stat,
 				  STATX_ATTR_NODUMP);
 
 	generic_fillattr(inode, stat);
-	stat->dev = BTRFS_I(inode)->root->anon_dev;
+	stat->dev = BTRFS_I(inode)->root->sbdev.anon_dev;
 
 	spin_lock(&BTRFS_I(inode)->lock);
 	delalloc_bytes = BTRFS_I(inode)->new_delalloc_bytes;
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -2326,7 +2326,7 @@ static int btrfs_show_devname(struct seq_file *m, struct dentry *root)
 
 static dev_t btrfs_get_inode_dev(const struct inode *inode)
 {
-	return BTRFS_I(inode)->root->anon_dev;
+	return BTRFS_I(inode)->root->sbdev.anon_dev;
 }
 
 static const struct super_operations btrfs_super_ops = {
