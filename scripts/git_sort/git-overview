#!/bin/bash

progname=$(basename "$0")
format=short

usage () {
	echo "Usage: git overview <commit...>"
	echo ""
	echo "Output a summary string of commit objects"
	echo ""
	echo "Options:"
	echo "    -s, --short         Use format <abbrev> <subject> (<desc>) [default]"
	echo "    -f, --fixes         Use format <abbrev12> (\"<subject>\")"
	echo "    -l, --long          Use format <abbrev12> (\"<subject>\", <desc>)"
	echo "    -m, --mini          Use format <abbrev12> (<desc>)"
	echo "    -h, --help          Print this help"
	echo ""
}

result=$(getopt -o sflmh --long short,fixes,long,mini,help -n "$progname" -- "$@")
retval=$?
if [ $retval -eq 1 ]; then
	usage > /dev/stderr
	exit 1
elif [ $retval -ne 0 ]; then
	echo "Error: getopt error ($retval)" > /dev/stderr
	exit 1
fi

eval set -- "$result"

while true ; do
	case "$1" in
		-s|--short)
					format=short
					;;
		-f|--fixes)
					format=fixes
					;;
		-l|--long)
					format=long
					;;
		-m|--mini)
					format=mini
					;;
                -h|--help)
					usage
					exit
					;;
		--)
					shift
					break
					;;
		*)
					echo "Error: could not parse arguments" >&2
					exit 1
					;;
	esac
	shift
done

revs=$(git rev-parse --default HEAD "$@")
if [ $(echo "$revs" | wc -l) -eq 1 ]; then
	limit="--max-count=1"
fi

echo "$revs" | git rev-list $limit --stdin | while read commit; do
	if [ $format = "short" -o $format = "long" -o $format = "mini" ]; then
		desc=$(git describe --contains --match "v*" $commit 2>/dev/null)
		if [ -z "$desc" ]; then
			desc=$(git describe --contains --all $commit)
		fi
		desc="${desc%%[~^]*}"
	fi

	case $format in
		short)
			echo "$(git log --max-count=1 --pretty="format:%h %s" $commit) ($desc)"
			;;
		fixes)
			echo "$(git log --max-count=1 --abbrev=12 --pretty="format:%h (\"%s\")" $commit)"
			;;
		long)
			echo "$(git log --max-count=1 --abbrev=12 --pretty="format:%h (\"%s\"" $commit), $desc)"
			;;
		mini)
			echo "$(git log --max-count=1 --abbrev=12 --pretty="format:%h" $commit) ($desc)"
			;;
	esac
done
